<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scheme | Notes to self]]></title>
  <link href="http://pastafari.github.com/blog/categories/scheme/atom.xml" rel="self"/>
  <link href="http://pastafari.github.com/"/>
  <updated>2012-07-31T00:13:09+05:30</updated>
  <id>http://pastafari.github.com/</id>
  <author>
    <name><![CDATA[Mohit Thatte]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SICP notes - Week 1]]></title>
    <link href="http://pastafari.github.com/blog/2012/07/30/sicp-notes-week-1/"/>
    <updated>2012-07-30T22:07:00+05:30</updated>
    <id>http://pastafari.github.com/blog/2012/07/30/sicp-notes-week-1</id>
    <content type="html"><![CDATA[<p>This was a slow week for SICP. I managed to read 20 pages (thru section 1.1.6) and <a href="https://github.com/pastafari/sicp-redux/commit/0ded16f54e46dc8b451dd39c72edc08af776477c">solve exercises 1.1 thru 1.5.</a><br/>
<em>As an aside, I also read the foreword by Alan Perlis which was a pleasure to read and the preface to both the first and second editions (both worth reading IMO).</em></p>

<p>I find the book incredibly dense with insights and learnings and am happy to read at a leisurely pace absorbing as much as I can.</p>

<p>The 1st chapter titled <strong>Building Abstractions with Procedures</strong> begins with a quote:</p>

<p><blockquote><p>The acts of the mind wherein it exerts its power over simple ideas are chiefly these three:<br/>1. Combining several simple ideas into one compound one, and thus all complex ideas are made.<br/>2. The second is bringing two ideas, whether simple or complex, together, and setting them by one another so as to take a view of them at once, without uniting them into one, by which it gets all its ideas of relations.<br/>3. The third is separating them from all other ideas that accompany them in their real existence: this is called abstraction, and thus all general ideas are made.  <br/></p><footer><strong>John Locke</strong> <cite>An Essay Concerning Human Understanding(1690)</cite></footer></blockquote></p>

<p>It seems that <code>abstraction</code> is going to be a strong theme through the book. We dive into things with an introduction to 'computational processes' and by introducing the Lisp programming language.</p>

<p>One section of note asks the question: <br/>
<strong><em>If Lisp is not a mainstream programming language, why are we using it as the framework for our discussion of programming?</em></strong></p>

<p>The answer:<br/>
<strong>Lisp descriptions of processes, called <code>procedures</code>, can themselves be represented and manipulated as Lisp data.</strong>
<strong>The importance of this is that there are powerful program-design techniques that rely on the ability to blur the traditional distinction between <code>"passive" data</code> and <code>"active" processes</code></strong></p>

<p>The next section begins with the general idea of <code>language</code> itself:</p>

<p><blockquote><p>... Every powerful language has three mechanisms for accomplishing this:</p></p><p><p>primitive expressions -> which represent the simplest entities the language is concerned with.<br/>means of combination -> by which compound elements are made from simpler ones, and<br/>means of abstraction -> by which compound elements can be named and manipulated as units.</p></p><p><p></p></blockquote></p>

<p>Last week, I read a bit about <a href="ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf">the lambda calculus *PDF</a> and realized that the above is in fact a translation into English of the formal definition for <code>lambda terms</code>! Very interesting to note that the document linked above states clearly that the two branches of programming languages - The Fortran derivatives and The Lisp derivatives are essentially manifestations of the <code>Turing Machine (Alan Turing)</code> and <code>the Lambda Calculus (Alonzo Church)</code> respectively. Math is awesome stuff indeed :)</p>

<p>The rest of the sections introduce the Scheme dialect of Lisp, which seems to be easy to pick up once you get used to the prefix notation and parentheses!</p>

<p>The concept of <code>tree accumulation</code>, <code>substitution model</code> and the examples of <code>applicative order</code> and <code>normal order</code> substitution are introduced with examples.</p>

<p>The application of these concepts is made clear in example 1.5 whose solution I have pasted below:</p>

<script src="https://gist.github.com/3208989.js?file=sicp-1.5.scm"></script>


<p>I am not sure about the format for these notes. They will probably evolve as I continue reading. But for now, they are akin to a chronological walk through the book itself.</p>
]]></content>
  </entry>
  
</feed>
