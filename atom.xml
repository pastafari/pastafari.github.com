<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Notes to self]]></title>
  <link href="http://pastafari.github.com/atom.xml" rel="self"/>
  <link href="http://pastafari.github.com/"/>
  <updated>2012-06-28T22:41:37+05:30</updated>
  <id>http://pastafari.github.com/</id>
  <author>
    <name><![CDATA[Mohit Thatte]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Our experience with Vagrant and Puppet]]></title>
    <link href="http://pastafari.github.com/blog/2012/06/03/experiences-with-vagrant-and-puppet/"/>
    <updated>2012-06-03T18:14:00+05:30</updated>
    <id>http://pastafari.github.com/blog/2012/06/03/experiences-with-vagrant-and-puppet</id>
    <content type="html"><![CDATA[<p>On my current project, after a bit of prodding by <a href="http://twitter.com/sunitparekh">Sunit</a> we decided to experiment with using a virtual
machine setup managed through <a href="http://vagrantup.com">Vagrant</a> and <a href="http://virtualbox.org">Virtual Box</a> for our development
environment.</p>

<p>In this post I will try and outline the pros and cons and
lessons learnt over the past week while pairing with
<a href="http://twitter.com/vginette">Ginette</a> and setting up our own VM
managed with Vagrant.</p>

<h2>Why Vagrant?</h2>

<p>Our project uses Rails with Postgres and Nginx/Passenger. We also use RVM to manage Ruby versions.</p>

<p>The reasons to use Vagrant were primarily these:</p>

<ul>
<li>Use <strong><em>one VM per project</em></strong> without cluttering your main machine with the sundry dependencies (MySQL, Postgres, Redis,
Apache, Nginx, Passenger, et al) that projects invariably have.</li>
<li>Have a <strong><em>5 minute setup</em></strong> for any new developer who joins our team to
get up and running. This should be as easy as running a single
command: <code>vagrant up</code>. No installation, no troubleshooting. It
should <em>&#8220;just work&#8221;</em> &#8482;</li>
<li>Have a <strong><em>consistent</em></strong> environment across all developers machines.</li>
<li>Have a simple command line based workflow: <code>vagrant up</code>, <code>vagrant ssh</code>,
<code>vagrant halt</code></li>
<li>Create <strong><em>reusable</em></strong> configuration scripts using Puppet that could be used on Test/Staging and Production environments as well. <strong><em>(Ambitious)</em></strong></li>
</ul>


<h2>TL;DR version</h2>

<h4>Advantages</h4>

<ul>
<li><code>vagrant up</code> <em>&#8220;just works&#8221;</em> &#8482; ! Excellent for hiding details and
letting people focus on GTD. This also improves productivity by
avoiding &#8220;it doesn&#8217;t work on my machine&#8221; delays! Because everything
<em>&#8220;just works&#8221;</em> &#8482; on the VM.</li>
<li>Setting up a  <a href="http://vagrantup.com/v1/docs/base_boxes.html">Vagrant base box</a>
is not hard. If you setup a minimal base box with a operating system
(sans GUI) and SSH, you can reuse it on every project and do the provisioning through Puppet/Chef.</li>
<li>We recommend using a <a href="http://vagrantbox.es">pre-existing base box</a>, installing dependencies
with a package manager (apt-get, etc.) and then hosting it somewhere
on your local network for fellow devs to use as a pre-packaged VM.
This is a quick and easy way to get setup.</li>
</ul>


<h4>Disadvantages</h4>

<ul>
<li>Our biggest roadblocks were with getting Puppet to do our bidding. We
tried to reuse existing Puppet modules for installing dependencies.
We managed to get RVM and Postgres installed through Puppet.
But we just couldn&#8217;t seem to get Nginx/Passenger to work.</li>
<li>Puppet modules tended to be either poorly documented / not
maintained or just did not work! Maybe we were doing something
wrong, but it was really hard to tell!</li>
<li>Base boxes for your choice of operating system might not be readily
available! (This is not a major disadvantage as it is quite easy to
create your own base box, but it is time consuming)</li>
</ul>


<h2>Background</h2>

<p>We started by watching a short but informative
<a href="http://crohr.me/presentations/vagrant-puppet/">presentation</a> by Cyril
Rohr about using Vagrant with Puppet. It was enough to convince us to
pursue the magical <code>vagrant up</code>!</p>

<h2>How to setup Vagrant</h2>

<p>Just follow these simple
<a href="http://vagrantup.com/v1/docs/getting-started/index.html">getting started</a>
instructions on the Vagrant site. You can try it out using the
<code>lucid32</code> base box that the creators of Vagrant have provided. If the
setup was easy enough, you should already be convinced that Vagrant is
a useful tool ;-)</p>

<h2>Customizing the VM for your project</h2>

<p>Setting up Vagrant was easy. The more complicated part was
setting up a Virtual machine for use on the project.</p>

<p>There were two strategies that we thought of:</p>

<ol>
<li>Create a fully loaded base box with all the dependencies pre-installed. This base box can be hosted on a URL that can be
shared with the team and added to the Vagrantfile as well. The first
time someone does a <code>vagrant up</code>, the base box will be downloaded to
their machine and stored locally.</li>
<li>Create or reuse a minimal base box with only the OS and SSH
installed. Provision the dependencies for your project through
Puppet/Chef. Ideally reuse existing Puppet modules/Chef recipes.</li>
</ol>


<p>Option 1 is relatively easier and faster for these reasons.</p>

<ul>
<li>There are quite a few base boxes that people have already created and
shared on the <a href="http://vagrantbox.es">Vagrant Boxes site</a>.</li>
<li>It is straightforward to use a package manager (apt-get, et .al) to
install whatever you need on the base box</li>
<li>Once your installation is done, you can <em><strong>freeze</strong></em> it on the VM
and no one else needs to do it. So less troubleshooting, etc. is likely.</li>
</ul>


<p>Option 2 was more interesting because we wanted to experiment with
Puppet! So thats what we went with. Here is our experiences:</p>

<ul>
<li>Puppet uses the concept of Resource Abstraction Layer to abstract
away OS level details for resources like: Files, Packages, Services,
Users, Executables and so on.</li>
<li>Puppet provides a language to specify configuration and one can
maintain a &#8220;manifest&#8221; file with per-project requirements.</li>
<li>Puppet modules are a way to reuse other people&#8217;s code to avoid the
nitty-gritty of setting things up. There is a PuppetLabs module
repository as well as a number of modules available on Github.
However, we were not too happy with the documentation and support
for most modules that we used.</li>
<li>We ended up using Puppet modules for RVM and Postgresql
installation. In order to tell Puppet to install RVM, all we needed
to do was: <code>include 'rvm'</code> in our Puppet manifest. The same was true
for Postgresql.</li>
<li>In conclusion, we realized that Puppet modules are nothing but
collections of OS specific installation instructions for various
packages and services. It is not too difficult to write your own
module that delegates to the OS you are using. And that is probably
a better way to go than rely on some obscure module that might not
be properly tested/maintained.</li>
</ul>


<h2>Bottomline/Conclusion</h2>

<p>Using Vagrant to manage VM&#8217;s is a great idea.</p>

<p>However, until I become a Puppet/Chef expert or I there is one on the team, I would go for a fully-loaded base
box option it is less time consuming.</p>

<p>Happy coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The shapes of numbers]]></title>
    <link href="http://pastafari.github.com/blog/2012/05/17/the-shapes-of-numbers/"/>
    <updated>2012-05-17T11:23:00+05:30</updated>
    <id>http://pastafari.github.com/blog/2012/05/17/the-shapes-of-numbers</id>
    <content type="html"><![CDATA[<p>I am planning to re-start reading
<a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">SICP</a>, so I
was looking around for some online course structure that I could
follow. I found that UC Berkeley offers a course
<a href="http://www-inst.eecs.berkeley.edu/~cs61a/sp12/">CS 61A</a> titled SICP which uses Python
as the language of instruction rather than Scheme. I was going through
the course page and found a rather interesting homework problem</p>

<blockquote><p>Q4. <a href="http://en.wikipedia.org/wiki/Douglas_Hofstadter">Douglas Hofstadter’s</a> Pulitzer-prize-winning book, <a href="http://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach">Gödel, Escher, Bach</a>, poses the following mathematical puzzle.</p>

<p>Pick a positive number n <br/>
If n is even, divide it by 2. <br/>
If n is odd, multipy it by 3 and add 1. <br/>
Continue this process until n is 1. <br/>
The number n will travel up and down but eventually end at 1 (at
least for all numbers that have ever been tried &#8211; nobody has ever
proved that the sequence will always terminate).</p>

<p>The sequence of values of n is often called a Hailstone sequence,
because hailstones also travel up and down in the atmosphere before
falling to earth. Write a function &#8230;</p></blockquote>

<p>I have always been fascinated by the shapes generated by equations, so
I wanted to &#8216;see&#8217; this <code>hailstone</code> shape for myself. I wrote a
little <code>Ruby</code> script to generate a hailstone sequence.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hailstone</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sequence</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">until</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="n">even?</span> <span class="p">?</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span> <span class="p">:</span> <span class="n">n</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">sequence</span> <span class="o">&lt;&lt;</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">sequence</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I generated the sequence for the first 100 numbers.</p>

<p>I then used the <code>Grapher</code> utility on the Mac to plot the resulting series. I found
that the shape was like a sawtooth curve, oscillating up and down for
a while before gracefully dying down to 1. This behavior was
pronounced for odd and prime numbers more than even numbers (which
tend to damp down quicker). Here&#8217;s a picture (click image to enlarge) of the <code>hailstone series</code>
for 11, 59 and 89 (<em>all odd and prime by choice</em>):</p>

<p><img src="http://pastafari.github.com/images/hailstones.jpg" alt="Hailstone series" /></p>

<p>Further reading: <br/>
 &rarr; <a href="http://www.nssl.noaa.gov/primer/hail/hail_basics.html">How are hailstone&#8217;s formed?</a> <br/>
 &rarr; <a href="http://xkcd.com/917/">XKCD on Hofstadter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ten Commandments from Bertrand Russell]]></title>
    <link href="http://pastafari.github.com/blog/2012/05/08/ten-commandments-from-bertrand-russell/"/>
    <updated>2012-05-08T12:29:00+05:30</updated>
    <id>http://pastafari.github.com/blog/2012/05/08/ten-commandments-from-bertrand-russell</id>
    <content type="html"><![CDATA[<p>I stumbled upon an
<a href="http://www.brainpickings.org/index.php/2012/05/02/a-liberal-decalogue-bertrand-russell/">interesting article</a>
about Bertrand Russell&#8217;s philosophy. Here is a &#8216;Note to self&#8217; that is
probably going to be one of the foundations of my lifes philosophy!</p>

<blockquote><p>Perhaps the essence of the Liberal outlook could be summed up in a new decalogue, not intended to replace the old one but only to supplement it. The Ten Commandments that, as a teacher, I should wish to promulgate, might be set forth as follows:</p>

<ol>
<li><strong>Do not feel absolutely certain of anything.</strong></li>
<li><strong>Do not think it worth while to proceed by concealing evidence, for the evidence is sure to come to light.</strong></li>
<li><strong>Never try to discourage thinking for you are sure to succeed.</strong></li>
<li><strong>When you meet with opposition, even if it should be from your husband or your children, endeavor to overcome it by argument and not by authority, for a victory dependent upon authority is unreal and illusory.</strong></li>
<li><strong>Have no respect for the authority of others, for there are always contrary authorities to be found.</strong></li>
<li><strong>Do not use power to suppress opinions you think pernicious, for if you do the opinions will suppress you.</strong></li>
<li><strong>Do not fear to be eccentric in opinion, for every opinion now accepted was once eccentric.</strong></li>
<li><strong>Find more pleasure in intelligent dissent than in passive agreement, for, if you value intelligence as you should, the former implies a deeper agreement than the latter.</strong></li>
<li><strong>Be scrupulously truthful, even if the truth is inconvenient, for it is more inconvenient when you try to conceal it.</strong></li>
<li><strong>Do not feel envious of the happiness of those who live in a fool’s paradise, for only a fool will think that it is happiness.</strong></li>
</ol>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On deliberate practice]]></title>
    <link href="http://pastafari.github.com/blog/2012/05/03/on-deliberate-practice/"/>
    <updated>2012-05-03T11:45:00+05:30</updated>
    <id>http://pastafari.github.com/blog/2012/05/03/on-deliberate-practice</id>
    <content type="html"><![CDATA[<p>One of my life goals is to be an excellent programmer. I believe Peter
Norvig when <a href="http://norvig.com/21-days.html">he says</a> that it takes a
lot of time (10 years?) and effort to get there!</p>

<p>In order to achieve a mastery over the craft (and computer programming is
definitely a craft!) it is important to continuously grow and improve.</p>

<p>The million-dollar question is HOW? How do I go from here to there?</p>

<p>I am going to start with the beginner&#8217;s mind approach. What if I knew
nothing about computer programming and had to start from scratch? What
would I do? I have been reading about
<a href="http://calnewport.com/blog/2010/01/06/the-grandmaster-in-the-corner-office-what-the-study-of-chess-experts-teaches-us-about-building-a-remarkable-life/">deliberate practice</a>
and I&#8217;m convinced that it is the only way to go from here to there.</p>

<p>Deliberate practice can be briefly summarized as below (excerpt from
<a href="http://calnewport.com/blog/2010/01/06/the-grandmaster-in-the-corner-office-what-the-study-of-chess-experts-teaches-us-about-building-a-remarkable-life/">Cal Newport&#8217;s blog</a>):</p>

<blockquote><ol>
<li><strong>It’s designed to improve performance.</strong> “The essence of deliberate practice is continually stretching an individual just beyond his or her current abilities. That may sound obvious, but most of us don’t do it in the activities we think of as practice.”</li>
<li><strong>It’s repeated a lot.</strong> “High repetition is the most important difference between deliberate practice of a task and performing the task for real, when it counts.”</li>
<li><strong>Feedback on results is continuously available.</strong> “You may think that your rehearsal of a job interview was flawless, but your opinion isn’t what counts.”</li>
<li><strong>It’s highly demanding mentally.</strong> “Deliberate practice is above all an effort of focus and concentration. That is what makes it ‘deliberate,’ as distinct from the mindless playing of scales or hitting of tennis balls that most people engage in.”</li>
<li><strong>It’s hard.</strong> “Doing things we know how to do well is enjoyable, and that’s exactly the opposite of what deliberate practice demands.”</li>
<li><strong>It requires <em>(good)</em> goals.</strong> “The best performers set goals that are not about the outcome but rather about the process of reaching the outcome.”</li>
</ol>
</blockquote>

<p>So, I must identify deliberate practice activities that I perform on a
regular basis, get feedback and get on a path.</p>

<p>The really hard question is determining good goals. This is where a
mentor can play a part.</p>

<p>My next post will be about what specific goals I have set up for
myself in the days to come and how I intend to apply the principles of
deliberate practice to get from here to there!</p>
]]></content>
  </entry>
  
</feed>
